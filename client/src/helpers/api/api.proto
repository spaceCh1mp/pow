syntax = "proto3";

package v1;

message ID {
    string id = 1;
}

message Result {
    string id= 1;
    bool status = 2;
}

message Void{}

// implement crud for user
//Create
message NewUser {
    string firstName = 1;
    string lastName = 2;
    string email = 3;
    string password = 4;
}
//read
message ReadUser{
    string name = 1;
    string username = 2;
    string email = 3;
}

message ReadUserLog{
    repeated Transaction Transactions = 5;
}

//update 
message UpdateUser{
    string id = 1;
    string firstName = 2;
    string lastName = 3;
    string email = 4;
    string familyid = 5;
    string password = 6;
}

service Users{
    //create new user
    rpc Create(NewUser) returns(ID) {}
    
    //read user data
    rpc Read(ID) returns(ReadUser) {}
    rpc ReadLog(ID) returns(ReadUserLog) {}
    
    //update user data (logs included)
    rpc Update(UpdateUser) returns(Result) {}
    
    //delete user
    rpc Delete(ID) returns(Result) {}
}

// implement crud for group
message NewGroup{
    float rate = 1;
    string name = 2;
    string organiser = 3;
}
//read
message Group{
    string id = 1;
    float rate = 2;
    string name = 3;
}

//update 
message UpdateGroup{
    string id = 1;
    string name = 2;
    float rate = 3;
}

message GroupMember{
    string id = 1;
    string userid = 2;
}

message Members{
    repeated ReadUser user = 1;
}

service Groups{
    rpc Create(NewGroup) returns(ID) {}
    
    rpc Read(ID) returns(Group) {}
    rpc ReadGroupMembers(ID) returns(Members) {}
    rpc ReadGroupOrganiser(ID) returns(ReadUser) {}
    
    rpc Update(UpdateGroup) returns(Result) {}
    rpc UpdateMember(GroupMember) returns(Result) {}
    
    rpc Delete(ID) returns(Result) {}
    rpc DeleteMember(GroupMember) returns(Result){}
}

//Transaction

message NewTransaction{
    float amount =1;
    string userid = 2;
}

message Transaction{
    string id = 1;
    float amount = 2;
    string userid = 3;
}

message TID{
    string id = 1;
    string userid = 2;
}

service Transactions{
    rpc Create(NewTransaction) returns(Result){}
    rpc ReadTransaction(TID) returns(Transaction){}  
}