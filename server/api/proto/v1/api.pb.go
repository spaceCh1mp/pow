// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	ID
	Result
	Void
	User
	ReadUser
	UpdateUser
	NewGroup
	Group
	UpdateGroup
	GroupMember
	NewTransaction
	Transaction
*/
package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Result struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status bool   `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Result) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type User struct {
	FirstName string `protobuf:"bytes,1,opt,name=firstName" json:"firstName,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=lastName" json:"lastName,omitempty"`
	UserName  string `protobuf:"bytes,6,opt,name=userName" json:"userName,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Password  string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	FamilyID  string `protobuf:"bytes,5,opt,name=familyID" json:"familyID,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetFamilyID() string {
	if m != nil {
		return m.FamilyID
	}
	return ""
}

// read
type ReadUser struct {
	FirstName string `protobuf:"bytes,1,opt,name=firstName" json:"firstName,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=lastName" json:"lastName,omitempty"`
	UserName  string `protobuf:"bytes,5,opt,name=userName" json:"userName,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	FamilyID  string `protobuf:"bytes,4,opt,name=familyID" json:"familyID,omitempty"`
}

func (m *ReadUser) Reset()                    { *m = ReadUser{} }
func (m *ReadUser) String() string            { return proto.CompactTextString(m) }
func (*ReadUser) ProtoMessage()               {}
func (*ReadUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadUser) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *ReadUser) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *ReadUser) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ReadUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ReadUser) GetFamilyID() string {
	if m != nil {
		return m.FamilyID
	}
	return ""
}

// update
type UpdateUser struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=firstName" json:"firstName,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=lastName" json:"lastName,omitempty"`
	Email     string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Familyid  string `protobuf:"bytes,5,opt,name=familyid" json:"familyid,omitempty"`
	Password  string `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
}

func (m *UpdateUser) Reset()                    { *m = UpdateUser{} }
func (m *UpdateUser) String() string            { return proto.CompactTextString(m) }
func (*UpdateUser) ProtoMessage()               {}
func (*UpdateUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateUser) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UpdateUser) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UpdateUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UpdateUser) GetFamilyid() string {
	if m != nil {
		return m.Familyid
	}
	return ""
}

func (m *UpdateUser) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// implement crud for group
type NewGroup struct {
	Rate  float32 `protobuf:"fixed32,1,opt,name=rate" json:"rate,omitempty"`
	Name  string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	OrgID string  `protobuf:"bytes,3,opt,name=orgID" json:"orgID,omitempty"`
}

func (m *NewGroup) Reset()                    { *m = NewGroup{} }
func (m *NewGroup) String() string            { return proto.CompactTextString(m) }
func (*NewGroup) ProtoMessage()               {}
func (*NewGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NewGroup) GetRate() float32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *NewGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewGroup) GetOrgID() string {
	if m != nil {
		return m.OrgID
	}
	return ""
}

// read
type Group struct {
	Id    string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Rate  float32 `protobuf:"fixed32,2,opt,name=rate" json:"rate,omitempty"`
	Name  string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	OrgID string  `protobuf:"bytes,4,opt,name=orgID" json:"orgID,omitempty"`
	MemID []*ID   `protobuf:"bytes,5,rep,name=memID" json:"memID,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Group) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Group) GetRate() float32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetOrgID() string {
	if m != nil {
		return m.OrgID
	}
	return ""
}

func (m *Group) GetMemID() []*ID {
	if m != nil {
		return m.MemID
	}
	return nil
}

// update
type UpdateGroup struct {
	Id    string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name  string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Rate  float32 `protobuf:"fixed32,3,opt,name=rate" json:"rate,omitempty"`
	OrgID string  `protobuf:"bytes,4,opt,name=orgID" json:"orgID,omitempty"`
}

func (m *UpdateGroup) Reset()                    { *m = UpdateGroup{} }
func (m *UpdateGroup) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroup) ProtoMessage()               {}
func (*UpdateGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateGroup) GetRate() float32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *UpdateGroup) GetOrgID() string {
	if m != nil {
		return m.OrgID
	}
	return ""
}

type GroupMember struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Userid string `protobuf:"bytes,2,opt,name=userid" json:"userid,omitempty"`
}

func (m *GroupMember) Reset()                    { *m = GroupMember{} }
func (m *GroupMember) String() string            { return proto.CompactTextString(m) }
func (*GroupMember) ProtoMessage()               {}
func (*GroupMember) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GroupMember) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GroupMember) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type NewTransaction struct {
	Amount float32 `protobuf:"fixed32,1,opt,name=amount" json:"amount,omitempty"`
	Userid string  `protobuf:"bytes,2,opt,name=userid" json:"userid,omitempty"`
	Date   string  `protobuf:"bytes,3,opt,name=date" json:"date,omitempty"`
}

func (m *NewTransaction) Reset()                    { *m = NewTransaction{} }
func (m *NewTransaction) String() string            { return proto.CompactTextString(m) }
func (*NewTransaction) ProtoMessage()               {}
func (*NewTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *NewTransaction) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *NewTransaction) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *NewTransaction) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

type Transaction struct {
	Id     string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Amount float32 `protobuf:"fixed32,2,opt,name=amount" json:"amount,omitempty"`
	Userid string  `protobuf:"bytes,3,opt,name=userid" json:"userid,omitempty"`
	Date   string  `protobuf:"bytes,4,opt,name=date" json:"date,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Transaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Transaction) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Transaction) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *Transaction) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func init() {
	proto.RegisterType((*ID)(nil), "v1.ID")
	proto.RegisterType((*Result)(nil), "v1.Result")
	proto.RegisterType((*Void)(nil), "v1.Void")
	proto.RegisterType((*User)(nil), "v1.User")
	proto.RegisterType((*ReadUser)(nil), "v1.ReadUser")
	proto.RegisterType((*UpdateUser)(nil), "v1.UpdateUser")
	proto.RegisterType((*NewGroup)(nil), "v1.NewGroup")
	proto.RegisterType((*Group)(nil), "v1.Group")
	proto.RegisterType((*UpdateGroup)(nil), "v1.UpdateGroup")
	proto.RegisterType((*GroupMember)(nil), "v1.GroupMember")
	proto.RegisterType((*NewTransaction)(nil), "v1.NewTransaction")
	proto.RegisterType((*Transaction)(nil), "v1.Transaction")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcf, 0x8e, 0x12, 0x4f,
	0x10, 0xc7, 0x99, 0x7f, 0x1d, 0x28, 0x08, 0x24, 0x9d, 0xcd, 0x86, 0xf0, 0x23, 0xbf, 0x90, 0x3e,
	0x28, 0x07, 0x45, 0x17, 0xe3, 0x13, 0x48, 0xa2, 0x1c, 0xc4, 0x64, 0xb2, 0xeb, 0xc5, 0x53, 0xaf,
	0xd3, 0xbb, 0xe9, 0x84, 0x61, 0x48, 0x77, 0xb3, 0xc4, 0x87, 0xf0, 0xe2, 0x33, 0x78, 0xf2, 0xdd,
	0x7c, 0x07, 0xd3, 0xff, 0x86, 0x99, 0xd9, 0xc1, 0x68, 0xe2, 0x69, 0xba, 0xea, 0xdb, 0x5d, 0xf5,
	0xa9, 0xaa, 0x6e, 0x80, 0x1e, 0xdd, 0xf3, 0xc5, 0x5e, 0x14, 0xaa, 0xc0, 0xe1, 0xc3, 0x15, 0xb9,
	0x80, 0x70, 0xbd, 0xc2, 0x43, 0x08, 0x79, 0x36, 0x0e, 0x66, 0xc1, 0xbc, 0x97, 0x86, 0x3c, 0x23,
	0x2f, 0x01, 0xa5, 0x4c, 0x1e, 0xb6, 0xaa, 0xa9, 0xe0, 0x4b, 0x40, 0x52, 0x51, 0x75, 0x90, 0xe3,
	0x70, 0x16, 0xcc, 0xbb, 0xa9, 0xb3, 0x08, 0x82, 0xf8, 0x63, 0xc1, 0x33, 0xf2, 0x23, 0x80, 0xf8,
	0x46, 0x32, 0x81, 0xa7, 0xd0, 0xbb, 0xe3, 0x42, 0xaa, 0x0d, 0xcd, 0x99, 0x3b, 0x7f, 0x72, 0xe0,
	0x09, 0x74, 0xb7, 0xd4, 0x89, 0xa1, 0x11, 0x4b, 0x5b, 0x6b, 0x07, 0xc9, 0x84, 0xd1, 0x90, 0xd5,
	0xbc, 0x8d, 0x2f, 0x20, 0x61, 0x39, 0xe5, 0xdb, 0x71, 0x64, 0x04, 0x6b, 0xe8, 0x13, 0x7b, 0x2a,
	0xe5, 0xb1, 0x10, 0xd9, 0x38, 0xb6, 0x27, 0xbc, 0xad, 0xb5, 0x3b, 0x9a, 0xf3, 0xed, 0x97, 0xf5,
	0x6a, 0x9c, 0x58, 0xcd, 0xdb, 0xe4, 0x5b, 0x00, 0xdd, 0x94, 0xd1, 0xec, 0x1f, 0x02, 0x27, 0x7f,
	0x0a, 0x5c, 0x42, 0xc5, 0x0d, 0xa8, 0xef, 0x01, 0xc0, 0xcd, 0x3e, 0xa3, 0x8a, 0x19, 0xac, 0xe6,
	0x00, 0x6a, 0x98, 0xe1, 0xef, 0x30, 0xa3, 0x06, 0x66, 0x89, 0x12, 0xb7, 0xa2, 0xf0, 0xac, 0xde,
	0x1f, 0x9e, 0xd5, 0xfa, 0x8a, 0xea, 0x7d, 0x25, 0xef, 0xa0, 0xbb, 0x61, 0xc7, 0xb7, 0xa2, 0x38,
	0xec, 0x31, 0x86, 0x58, 0x50, 0x65, 0xbb, 0x16, 0xa6, 0x66, 0xad, 0x7d, 0xbb, 0x13, 0xa2, 0x59,
	0x6b, 0x82, 0x42, 0xdc, 0xaf, 0x57, 0xbe, 0x19, 0xc6, 0x20, 0x12, 0x12, 0x1b, 0xa6, 0x59, 0xaa,
	0x0f, 0x1b, 0xb6, 0x84, 0x8d, 0xda, 0xc2, 0xc6, 0x95, 0xb0, 0x78, 0x0a, 0x49, 0xce, 0x72, 0x33,
	0xf5, 0x68, 0xde, 0x5f, 0xa2, 0xc5, 0xc3, 0xd5, 0x62, 0xbd, 0x4a, 0xad, 0x93, 0x7c, 0x82, 0xbe,
	0x6d, 0xf2, 0xd9, 0xd4, 0x8f, 0xe8, 0x3d, 0x4e, 0x54, 0xc1, 0x69, 0x4d, 0x4d, 0x5e, 0x43, 0xdf,
	0x84, 0x7d, 0xcf, 0xf2, 0xdb, 0x96, 0x11, 0x5e, 0x02, 0xd2, 0xf7, 0x83, 0x67, 0x2e, 0xbc, 0xb3,
	0xc8, 0x35, 0x0c, 0x37, 0xec, 0x78, 0x2d, 0xe8, 0x4e, 0xd2, 0xcf, 0x8a, 0x17, 0x3b, 0xbd, 0x93,
	0xe6, 0xc5, 0x61, 0xa7, 0x5c, 0x6b, 0x9d, 0x75, 0x2e, 0x82, 0x46, 0xcc, 0x3c, 0x62, 0x2f, 0x35,
	0x6b, 0x42, 0xa1, 0x5f, 0x0d, 0xd9, 0x02, 0xe3, 0x52, 0x84, 0x67, 0x52, 0x44, 0xad, 0x29, 0xe2,
	0x53, 0x8a, 0xe5, 0xd7, 0x00, 0x12, 0x7d, 0x59, 0x25, 0x9e, 0x02, 0x7a, 0x23, 0x98, 0xee, 0x4c,
	0x57, 0xf7, 0x5b, 0x3b, 0x27, 0xae, 0xf3, 0xa4, 0x83, 0xff, 0x87, 0x58, 0x3f, 0x37, 0xec, 0x3c,
	0x93, 0x81, 0xfe, 0xfa, 0x07, 0x48, 0x3a, 0xf8, 0x09, 0x20, 0x3b, 0x14, 0x3c, 0x34, 0xa7, 0xcb,
	0x57, 0x30, 0x01, 0xbb, 0x53, 0xff, 0x24, 0x99, 0x38, 0x68, 0xc5, 0xb6, 0x4c, 0xb1, 0x32, 0x52,
	0x4d, 0x5f, 0xfe, 0x0c, 0x00, 0x99, 0x01, 0x48, 0x3c, 0x2b, 0x81, 0x4c, 0x32, 0x7f, 0x65, 0x2b,
	0x50, 0xff, 0x35, 0xa0, 0x7a, 0xfa, 0x6b, 0x36, 0x91, 0x0e, 0x7e, 0x06, 0x58, 0x8b, 0xc6, 0xfc,
	0x20, 0xee, 0xe9, 0x8e, 0xeb, 0x37, 0x79, 0x8e, 0xff, 0x69, 0xc9, 0x3f, 0x3a, 0xf1, 0xdb, 0x7c,
	0xf5, 0x02, 0x9e, 0xc3, 0xc0, 0x8a, 0xee, 0x86, 0x8c, 0xca, 0x9c, 0xd6, 0xf1, 0x97, 0xf5, 0xe6,
	0x30, 0xa8, 0x8c, 0x58, 0xe2, 0x17, 0x65, 0xd1, 0xd8, 0x15, 0x5d, 0x91, 0x27, 0x26, 0x59, 0xc5,
	0x61, 0xca, 0x1c, 0xe9, 0x32, 0xaa, 0xf7, 0xc4, 0x67, 0x7a, 0xbc, 0xfb, 0x16, 0x99, 0xbf, 0x8f,
	0x57, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xfb, 0x88, 0x79, 0x4b, 0x06, 0x00, 0x00,
}
